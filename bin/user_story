#!usr/bin/env ruby -w

require_relative '../lib/user_story/story'
require_relative '../lib/user_story/generator'
require_relative '../lib/user_story/story_collection'

def new_story
  story = Story.new
  say_with_clear_screen { puts 'As a...' }
  story.add_actor(gets.chomp)
  say_with_clear_screen { puts "As a #{story.actor} I want to..." }
  story.add_goal(gets.chomp)
  say_with_clear_screen { puts "As a #{story.actor} I want to #{story.goal} so that..." }
  story.add_reason(gets.chomp)
  story
end

def create_markdown_file(project_name, stories)
  file_name = "#{sanitize_file_name(project_name)}.md"
  IO.popen("touch #{file_name}") if !File.exist?("#{file_name}")
  markdown = stories.to_markdown
  File.open("#{file_name}", 'w') { |file| file.write(markdown) }
  current_file_path = File.expand_path('.')
  say_with_clear_screen { puts "Your user stories were saved in #{current_file_path}/#{file_name}" }
end

def sanitize_file_name(file_name)
  file_name.downcase.split.join('_') 
end

def exit_with
  clear_screen
  yield
  exit
end

def say_with_clear_screen
  clear_screen
  yield
end

def get_project_name
  say_with_clear_screen { puts "What's the name of your project?" }
  gets.chomp
end

def clear_screen
  system 'clear'
end

def continue_adding_stories?
  say_with_clear_screen { puts 'Would you like to add another user story? (y/n)' }
  %w(y Y).include?(gets.chomp)
end

project_name = get_project_name
stories = StoryCollection.new

loop do
  clear_screen
  stories.add_story(new_story)
  if continue_adding_stories?
    next
  else
    exit_with { create_markdown_file(project_name, stories) }
  end
end

